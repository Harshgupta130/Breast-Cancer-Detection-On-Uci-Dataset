# -*- coding: utf-8 -*-
"""Breast_cancer_uci.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sfy6MEyl0Ba_EyVcF2wQim6jLDjPYEFu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn.metrics import confusion_matrix

from google.colab import files
file1=files.upload()

data = pd.read_csv('/content/data.csv')
data.head()

del data['Unnamed: 32']

data.shape

x = data.iloc[:, 2:].values
y = data.iloc[:, 1].values

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder
labelencoder_X_1 = LabelEncoder()
y = labelencoder_X_1.fit_transform(y)

g=sns.countplot(y)
plt.xticks(rotation='vertical')
plt.xlabel(['0=benign','1=malignant'])
plt.show()

from imblearn.over_sampling import SMOTE
smote=SMOTE()

x,y=smote.fit_resample(x,y)

g=sns.countplot(y)
plt.xticks(rotation='vertical')
plt.xlabel(['0=benign','1=malignant'])
plt.show()

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state = 0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

classifier = Sequential()
classifier.add(Dense(units=64, kernel_initializer='uniform', activation='relu', input_dim=30))
classifier.add(Dropout(rate=0.1))
classifier.add(Dense(units=64, kernel_initializer='uniform', activation='relu'))
classifier.add(Dropout(rate=0.1))
classifier.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

classifier.fit(X_train, y_train, batch_size=10, epochs=10)

y_pred_train = classifier.predict(X_train)
y_pred_test = classifier.predict(X_test)

y_pred_test = (y_pred_test > 0.5)
y_pred_train=(y_pred_test>0.5)

z=y_pred_test.shape
z

cm = confusion_matrix(y_test, y_pred_test)

print("Our accuracy is {}%".format(((cm[0][0] + cm[1][1])/z[0])*100))

sns.heatmap(cm,annot=True)
plt.savefig('h.png')